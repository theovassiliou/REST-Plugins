module SATTestSeries {
	type charstring string;

	// get /location/{name} 				Get location information
	// Get information about locations matching the given name or name fragment
	type record RecordOne {
		string locationName, string path
	}
	with {
		encode "*record type encoding*";
		variant "*record type variant*";
		encode (locationName) "*type field encoding*";
		variant (locationName) "*type field variant*"
	}


	type record RecordTwo {
		string locationName, string path
	}
	with {
		encode "*record type encoding*";
		variant "*record type variant*";
		encode (locationName) "*type field encoding*";
		variant (locationName) "*type field variant*"
	}

	// should result in
	//
	type record GetLocation {
		string locationName
	}
	with {
		encode "REST/get";
		variant "path: /location/{locationName}";
		encode (locationName) "niu - not in use";
		variant (locationName) "niu - not in use"
	}


	type record Location {
		string name, float lon, float lat, string id
	}

	type record GetLocation_Response {
		record of Location locations
	}

	template RecordOne recordOneTemplate(string _name) := {
		locationName := _name, path := "ThePath"
	}

	template RecordTwo recordTwoTemplate(string _name) := {
		locationName := _name, path := "ThePath"
	}
	with {
		encode "*record value encoding*";
		variant "*record value variant*";
		encode (locationName) "*value field encoding*";
		variant (locationName) "*value field variant*"
	}


	template GetLocation getLocation(string _name) := {locationName := _name}

	template GetLocation getLocation2(string _name) := {locationName := _name}
	with {
		encode "TEMPLATE ENCODING";
		variant "TEMPLATE VARIANT";
		encode (locationName) "WILL NOT SEE ENCODE FOR FIELD"
	}


	template Location BerlinHbf := {
		name := "Berlin Hbf", lon := ?, lat := ?, id := "8011113"
	}

	type component SATComponent {
	}

	testcase test_encodingVisibility() runs on SATComponent {
		log("Check 1");
		encvalue_o(recordOneTemplate("Berlin Hbf"));
		log("Check 2");
		encvalue_o(recordTwoTemplate("Berlin Ostbahnhof"));
	}

	testcase test_RESTGetPathEncoding() runs on SATComponent {
		log("Check REST/get");
		encvalue_o(getLocation("Ernst-Reuter-Platz"));
		encvalue_o(getLocation2("Ernst-Reuter-Platz"));
	}
}
with {
	encode "ModuleEncoding";
	variant (ModuleEncoding) "ModuleVariant";
}
