module REST_POST_TestSeries1 {
	import from Lib_Http all;

	import from API_DB_GraphQL_Example all;



	testcase test_RESTPost_1() runs on RESTComponent system DBRestService {
		map(mtc:p, system:s) param (config(AUTHORIZATION));
		p.send(queryStation("8000105"));
		timer t;
		t.start(5.0);

		alt {
		[] p.receive(graphQLResponseExample1:{?,?}) {
				setverdict(pass);
			}
		[] p
		   .receive(HTTPResponse:
					{
						statusLine := {statusCode := ?, reasonPhrase := ?},
						headers := ?,
						body := {?, ?}
					}) {
				setverdict(pass);
				t.stop;
			}
		[] p.receive {
				setverdict(fail);
			}
		[] t.timeout {
				setverdict(fail);
			}
		}
	}
	testcase test_RESTPost_2() runs on RESTComponent system DBRestService {
		map(mtc:p, system:s) param (config(AUTHORIZATION));
		p.send(queryStation("001"));
		timer t;
		t.start(5.0);

		alt {
		[] p.receive(graphQLResponseExample1:{?,?}) {
				setverdict(inconc);
			}
		[] p
		   .receive(HTTPResponse:
					{
						statusLine := {statusCode := ?, reasonPhrase := ?},
						headers := ?,
						body := {?, ?}
					}) {
				setverdict(pass);
				t.stop;
			}
		[] p.receive {
				setverdict(fail);
			}
		[] t.timeout {
				setverdict(fail);
			}
		}
	}

	testcase test_RESTPost_3() runs on RESTComponent system DBRestService {
		map(mtc:p, system:s) param (config(AUTHORIZATION));
		p.send(queryStation("abc"));
		timer t;
		t.start(5.0);

		alt {
		[] p.receive(graphQLResponseExample1:{?,?}) {
				setverdict(pass);
			}
		[] p
		   .receive(HTTPResponse:
					{
						statusLine := {statusCode := ?, reasonPhrase := ?},
						headers := ?,
						body := {?, ?}
					}) {
				setverdict(pass);
				t.stop;
			}
		[] p.receive {
				setverdict(fail);
			}
		[] t.timeout {
				setverdict(fail);
			}
		}
	}
}
with {
	encode "RESTfull/json"
}
