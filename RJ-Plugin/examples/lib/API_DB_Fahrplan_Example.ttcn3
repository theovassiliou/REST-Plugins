module API_DB_Fahrplan_Example {
	import from Lib_Http all;
	import from Lib_JSON all;

	const charstring BASE_URL := "https://api.deutschebahn.com/freeplan/v1";
	modulepar charstring AUTHORIZATION := "NO AUTHORIZATION SET"; // Example: "Bearer CCAAFFEE"

	// The REST Calls
	
	type record GetLocation {
		string locationName
	}
	with {
		encode "REST/get";
		variant "path: /location/{locationName}";
	}

	type record LocationResponse {
		set of Location locations
	}
	with {
		encode "REST/getResponse";
		encode (locations) "body/JSON"
	}


	type record GetArrivalBoard {
		string id, dateISO8601 date
	}
	with {
		encode "REST/get";
		variant "path: /arrivalBoard/{id}?date={date}"
	}

	type record GetArrivalBoard_Response {
		record of Board boards
	}
	with {
		encode "REST/getResponse";
		encode (boards) "body/JSON"
	}

	type record Board {
		string name,
		string _type,
		string boardId,
		string stopId,
		string stopName,
		string dateTime,
		string origin,
		string track optional,
		string detailsId
	}
	with {
		variant (_type) "type"
	}

	type record Location {
		string name, float lon, float lat, string id
	}


	template GetLocation getLocation(string _name) := {locationName := _name}
	template GetArrivalBoard getArrivalBoard(string _id, dateISO8601 _date) := {
		id := _id, date := _date
	}

	type port RESTfull message {
		out GetLocation; out GetArrivalBoard;
		in LocationResponse; in GetArrivalBoard_Response;
		in HTTPResponse;
		map param (RESTAPIconfig config);
	}

	type record RESTAPIconfig {
		string baseUrl,
		string authorization optional
	}
	
	template  RESTAPIconfig config(string auth) := {
		baseUrl := BASE_URL,
		authorization := auth
	}
	
	type component RESTComponent {
		port RESTfull p;
	}

	type component DBRestService {
		port RESTfull s;
	}
}
with {
	encode "RESTfull/json"
}
