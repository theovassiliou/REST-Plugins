module REST_GET_TestSeries1 {
	import from Lib_Http all;

	import from API_DB_Fahrplan_Example all except {const AUTHORIZATION;};
	import from DB_Fahrplan_Settings_Example all;


	template Location BerlinHbf := {
		name := "Berlin Hbf", lon := ?, lat := ?, id := "8011160"
	}


	testcase test_SendingInt()
		runs on RESTComponent system DBRestService {
		map(mtc:p, system:s) param (config(AUTHORIZATION));

		p.send(getLocation("Berlin"));
		timer t;
		t.start(5.0);

		alt {
		[] p.receive(LocationResponse:{locations := superset(BerlinHbf)}) {
				setverdict(pass);
				t.stop;
			}
		[] p.receive {
				setverdict(fail);
			}
		[] t.timeout {
				setverdict(fail, "Server was not responding. Check base url");
			}
		}
	}


	testcase test_RESTGetPathEncoding()
		runs on RESTComponent system DBRestService {
		log("Check REST/get call towards DB");
		map(mtc:p, system:s) param (config(AUTHORIZATION));

		p.send(getLocation("Berlin"));
		timer t;
		t.start(5.0);

		alt {
		[] p.receive(LocationResponse:{locations := superset(BerlinHbf)}) {
				setverdict(pass);
				t.stop;
			}
		[] p.receive {
				setverdict(fail);
			}
		[] t.timeout {
				setverdict(fail, "Server was not responding. Check base url");
			}
		}
	}

	testcase test_parameterizeMap() runs on RESTComponent system DBRestService {
		map(mtc:p, system:s) param (config(AUTHORIZATION));

		p.send(getLocation("Berlin Steglitz"));

		timer t;
		t.start(5.0);

		alt {
		[] p.receive(LocationResponse:{locations := ?}) {
				setverdict(pass);
				t.stop;
			}
		[] p.receive {
				setverdict(fail);
			}
		[] t.timeout {
				setverdict(fail, "Server was not responding. Check base url");
			}
		}
	}


	testcase test_getArrivalBoard() runs on RESTComponent system DBRestService {
		map(mtc:p, system:s) param (config(AUTHORIZATION));

		p.send(getArrivalBoard("8011160", "2018-10-31"));

		timer t;
		t.start(5.0);

		alt {
		[] p.receive(GetArrivalBoard_Response:{boards := ?}) {
				setverdict(pass);
				t.stop;
			}
		[] p.receive {
				setverdict(fail);
			}
		[] t.timeout {
				setverdict(fail, "Server was not responding. Check base url");
			}
		}
	}
	
		testcase test_AuthorizationFlexibility() runs on RESTComponent system DBRestService {
		map(mtc:p, system:s) param (config("NO AUTHORIZATION SET"));

		p.send(getArrivalBoard("8011160", "2018-10-31")) to config(AUTHORIZATION);

		timer t;
		t.start(5.0);

		alt {
		[] p.receive(GetArrivalBoard_Response:{boards := ?}) {
				setverdict(pass);
				t.stop;
			}
		[] p.receive {
				setverdict(fail);
			}
		[] t.timeout {
				setverdict(fail, "Server was not responding. Check base url");
			}
		}
	}
	

	testcase test_getArrivalBoardResponse()
		runs on RESTComponent system DBRestService {
		map(mtc:p, system:s) param (config(AUTHORIZATION));

		p.send(getArrivalBoard("801116550", "2018-1031"));

		timer t;
		t.start(5.0);
		var integer v_int;
		alt {
		[] p.receive(GetArrivalBoard_Response:{boards := ?}) {
				setverdict(pass);
				t.stop;
			}
		[] p.receive(HTTPResponse:{ statusLine := { statusCode := 400, reasonPhrase := ?}, headers := ?, body := {?, ?}}) {
				setverdict(pass);
				t.stop;
			}
		[] p.receive {
				setverdict(fail);
			}
		[] t.timeout {
				setverdict(fail, "Server was not responding. Check base url");
			}
		}
	}
}
with {
	encode "RESTfull/json"
}
