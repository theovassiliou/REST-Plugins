module API_DB_GraphQL_Example {
	import from Lib_Http all;
	import from Lib_JSON all;

	const charstring BASE_URL := "https://api.deutschebahn.com/1bahnql/v1";
	modulepar charstring AUTHORIZATION := "NO AUTHORIZATION SET"; // Example: "Bearer CCAAFFEE"

	// The REST Calls
	type record graphQL {
		record {
			string query
		} body,
		string testChallange optional,
		string accept optional
	}
	with {
		encode "REST/post";
		variant "path:/graphql";
		encode (body) "body/JSON";
		encode (testChallange) "header:.";
		encode (accept) "header:Accept";
		
	}

	template graphQL queryStation(string id) := {
		body := {
			query :=
				"{stationWithEvaId(evaId: " & id &
				") { name location { latitude longitude }  picture { url } } }"
		},
		testChallange := omit,
		accept := "application/json; application/xml"
	}
	// { "query": "{stationWithEvaId(evaId: 8000105) { name location { latitude
	// longitude }  picture { url } } }" }
	// Response:
	/*
	 * {
			  "data": {
				"stationWithEvaId": {
				  "name": "Frankfurt (Main) Hbf",
				  "location": {
					"latitude": 50.107145,
					"longitude": 8.663789
				  },
				  "picture": {
					"url": "https://fotos.railway-stations.org/fotos/de/1866.jpg"
				  }
				}
			  }
		}
	 */
	type record graphQLResponseExample1 {
		Example1Response response,
		string			 etag
	}
	with {
		encode "REST/postResponse";
		encode (response) "body/JSON"; // decodes the Body as JSON into this field
		encode (etag) "header:ETag"; //
	}

	type record Example1Response {
		record {
			record {
				string name,
				record {
					float latitude, float longitude
				} location,
				record {
					string url
				} picture
			} stationWithEvaId
		} data
	}
	with {
		encode "REST/postResponse"
	}


	type port RESTfull message {
		out graphQL;
		in graphQLResponseExample1;
		in HTTPResponse;
		map param (RESTAPIconfig config);
	}

	type record RESTAPIconfig {
		string baseUrl, string authorization optional
	}

	template RESTAPIconfig config(string auth) := {
		baseUrl := BASE_URL, authorization := auth
	}
	type component RESTComponent {
		port RESTfull p;
	}

	type component DBRestService {
		port RESTfull s;
	}
}
with {
	encode "RESTfull/json"
}
