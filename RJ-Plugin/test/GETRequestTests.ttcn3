module GETRequestTests {
	import from Lib_HTTP {type RESTAPIconfig, EncodedRequest;}

	import from openapiv3 all;
	import from UnitFramework all;

	const charstring BASE_URL := "https://" & host & basePath;
	modulepar charstring host := "petstore.swagger.io";
	const charstring basePath := "/v2";


	type record GETFindByStatus {
		record of StatusEnum status optional
	}
	with {
		encode "REST/get";
		variant "path: /pet/findByStatus";
		encode (status) "query"
	}

	type record GETFindByStatusTemplate {
		string status, int64 id, double did
	}
	with {
		encode "REST/get";
		variant
		"path: /pet/findByStatus?status={status}&id={id}&did={did}"
	}


	type record GETFindById {
		record of StatusEnum status optional, record of integer id optional
	}
	with {
		encode "REST/get";
		variant "path: /pet/findById";
		encode (status) "query";
		encode (id) "query"
	}

	type record GETPetById {
		int64 id
	}
	with {
		encode "REST/get";
		variant "path: /pet/{id}/retrieve"
	}

	type record GETPetByParameters {
		int64 id, string name, string color
	}
	with {
		encode "REST/get";
		variant "path: /pet/{id}/{name}/{color}/retrieve"
	}

	type openapiv3.string StatusEnum ("available", "pending", "sold", "");

	testcase OneQuery() runs on RESTComponent system TSRestService {
		var HTTPPort.address requestLine;

		setUp(system);
		service.send(GETFindByStatus:{{StatusEnum:"available"}});
		service.receive(?) -> sender requestLine;
		log(requestLine);
		assertRequestLine(EncodedRequest:
						  {
							  "GET https://petstore.swagger.io/v2/pet/findByStatus?status=available HTTP/1.1",
							  ?,
							  omit
						  }, requestLine, "RequestLine not encoded correctly");
	}


	testcase OneQueryWithTemplate() runs on RESTComponent system TSRestService {
		var HTTPPort.address requestLine;

		setUp(system);
		service.send(GETFindByStatusTemplate:{"available",64,2.2});
		service.receive(?) -> sender requestLine;
		assertRequestLine(EncodedRequest:
						  {
							  "GET https://petstore.swagger.io/v2/pet/findByStatus?status=available&id=64&did=2.2 HTTP/1.1",
							  ?,
							  omit
						  }, requestLine, "RequestLine not encoded correctly");
	}

	testcase NoQuery() runs on RESTComponent system TSRestService {
		var HTTPPort.address requestLine;

		setUp(system);
		service.send(GETFindByStatus:{});
		service.receive(?) -> sender requestLine;
		assertRequestLine(EncodedRequest:
						  {
							  "GET https://petstore.swagger.io/v2/pet/findByStatus HTTP/1.1",
							  ?,
							  omit
						  }, requestLine, "RequestLine not encoded correctly");
	}


	testcase MultiQuery() runs on RESTComponent system TSRestService {
		var HTTPPort.address requestLine;
		setUp(system);
		service.send(GETFindByStatus:{status := {"available", "pending", ""}});
		service.receive(?) -> sender requestLine;
		assertRequestLine(EncodedRequest:
						  {
							  "GET https://petstore.swagger.io/v2/pet/findByStatus?status=available&status=pending&status= HTTP/1.1",
							  ?,
							  omit
						  }, requestLine, "RequestLine not encoded correctly");
	}

	testcase OneIntQuery() runs on RESTComponent system TSRestService {
		var HTTPPort.address requestLine;
		setUp(system);
		service.send(GETFindById:{id := {1}});
		service.receive(?) -> sender requestLine;
		assertRequestLine(EncodedRequest:
						  {
							  "GET https://petstore.swagger.io/v2/pet/findById?id=1 HTTP/1.1",
							  ?,
							  omit
						  }, requestLine, "RequestLine not encoded correctly");
	}

	testcase OneStatusIntQuery() runs on RESTComponent system TSRestService {
		var HTTPPort.address requestLine;
		setUp(system);
		service.send(GETFindById:{status := {"available"},id := {1}});

		service.receive(?) -> sender requestLine;
		assertRequestLine(EncodedRequest:
						  {
							  "GET https://petstore.swagger.io/v2/pet/findById?status=available&id=1 HTTP/1.1",
							  ?,
							  omit
						  }, requestLine, "RequestLine not encoded correctly");
	}

	testcase SimpleTemplateReplace() runs on RESTComponent system TSRestService
	{
		var HTTPPort.address requestLine;
		setUp(system);
		service.send(GETPetById:{id := 223});
		service.receive(?) -> sender requestLine;
		assertRequestLine(EncodedRequest:
						  {
							  "GET https://petstore.swagger.io/v2/pet/223/retrieve HTTP/1.1",
							  ?,
							  omit
						  }, requestLine, "RequestLine not encoded correctly");
	}

	testcase ComplexTemplateReplace()
		runs on RESTComponent system TSRestService {
		var HTTPPort.address requestLine;
		setUp(system);
		service
		.send(GETPetByParameters:{id := 223,name := "bucky",color := "red"});
		service.receive(?) -> sender requestLine;
		assertRequestLine(EncodedRequest:
						  {
							  "GET https://petstore.swagger.io/v2/pet/223/bucky/red/retrieve HTTP/1.1",
							  ?,
							  omit
						  }, requestLine, "RequestLine not encoded correctly");
	}
}